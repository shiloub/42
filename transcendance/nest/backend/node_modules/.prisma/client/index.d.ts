
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserConnection
 * 
 */
export type UserConnection = $Result.DefaultSelection<Prisma.$UserConnectionPayload>
/**
 * Model ChannelConnection
 * 
 */
export type ChannelConnection = $Result.DefaultSelection<Prisma.$ChannelConnectionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Channel
 * 
 */
export type Channel = $Result.DefaultSelection<Prisma.$ChannelPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ChannelRole: {
  DEFAULT: 'DEFAULT',
  OWNER: 'OWNER',
  ADMIN: 'ADMIN'
};

export type ChannelRole = (typeof ChannelRole)[keyof typeof ChannelRole]


export const ChannelType: {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC',
  DIRECT: 'DIRECT'
};

export type ChannelType = (typeof ChannelType)[keyof typeof ChannelType]

}

export type ChannelRole = $Enums.ChannelRole

export const ChannelRole: typeof $Enums.ChannelRole

export type ChannelType = $Enums.ChannelType

export const ChannelType: typeof $Enums.ChannelType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userConnection`: Exposes CRUD operations for the **UserConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserConnections
    * const userConnections = await prisma.userConnection.findMany()
    * ```
    */
  get userConnection(): Prisma.UserConnectionDelegate<ExtArgs>;

  /**
   * `prisma.channelConnection`: Exposes CRUD operations for the **ChannelConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelConnections
    * const channelConnections = await prisma.channelConnection.findMany()
    * ```
    */
  get channelConnection(): Prisma.ChannelConnectionDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserConnection: 'UserConnection',
    ChannelConnection: 'ChannelConnection',
    Message: 'Message',
    Channel: 'Channel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'userConnection' | 'channelConnection' | 'message' | 'channel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserConnection: {
        payload: Prisma.$UserConnectionPayload<ExtArgs>
        fields: Prisma.UserConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserConnectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserConnectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          findFirst: {
            args: Prisma.UserConnectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserConnectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          findMany: {
            args: Prisma.UserConnectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>[]
          }
          create: {
            args: Prisma.UserConnectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          createMany: {
            args: Prisma.UserConnectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserConnectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          update: {
            args: Prisma.UserConnectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          deleteMany: {
            args: Prisma.UserConnectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserConnectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserConnectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserConnectionPayload>
          }
          aggregate: {
            args: Prisma.UserConnectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserConnection>
          }
          groupBy: {
            args: Prisma.UserConnectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserConnectionCountArgs<ExtArgs>,
            result: $Utils.Optional<UserConnectionCountAggregateOutputType> | number
          }
        }
      }
      ChannelConnection: {
        payload: Prisma.$ChannelConnectionPayload<ExtArgs>
        fields: Prisma.ChannelConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelConnectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelConnectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          findFirst: {
            args: Prisma.ChannelConnectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelConnectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          findMany: {
            args: Prisma.ChannelConnectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>[]
          }
          create: {
            args: Prisma.ChannelConnectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          createMany: {
            args: Prisma.ChannelConnectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelConnectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          update: {
            args: Prisma.ChannelConnectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          deleteMany: {
            args: Prisma.ChannelConnectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelConnectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelConnectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelConnectionPayload>
          }
          aggregate: {
            args: Prisma.ChannelConnectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannelConnection>
          }
          groupBy: {
            args: Prisma.ChannelConnectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelConnectionCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelConnectionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: Prisma.$ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    messages: number
    channelConnections: number
    userConnections: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    channelConnections?: boolean | UserCountOutputTypeCountChannelConnectionsArgs
    userConnections?: boolean | UserCountOutputTypeCountUserConnectionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelConnectionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConnectionWhereInput
  }



  /**
   * Count Type ChannelCountOutputType
   */

  export type ChannelCountOutputType = {
    messages: number
    channelConnections: number
  }

  export type ChannelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChannelCountOutputTypeCountMessagesArgs
    channelConnections?: boolean | ChannelCountOutputTypeCountChannelConnectionsArgs
  }

  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountChannelConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelConnectionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    hash: string | null
    login: string | null
    socket: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    hash: string | null
    login: string | null
    socket: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    hash: number
    login: number
    socket: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    login?: true
    socket?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    login?: true
    socket?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    hash?: true
    login?: true
    socket?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    hash: string
    login: string
    socket: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hash?: boolean
    login?: boolean
    socket?: boolean
    messages?: boolean | User$messagesArgs<ExtArgs>
    channelConnections?: boolean | User$channelConnectionsArgs<ExtArgs>
    userConnections?: boolean | User$userConnectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hash?: boolean
    login?: boolean
    socket?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | User$messagesArgs<ExtArgs>
    channelConnections?: boolean | User$channelConnectionsArgs<ExtArgs>
    userConnections?: boolean | User$userConnectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      channelConnections: Prisma.$ChannelConnectionPayload<ExtArgs>[]
      userConnections: Prisma.$UserConnectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      hash: string
      login: string
      socket: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    channelConnections<T extends User$channelConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$channelConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    userConnections<T extends User$userConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly hash: FieldRef<"User", 'String'>
    readonly login: FieldRef<"User", 'String'>
    readonly socket: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.channelConnections
   */
  export type User$channelConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    where?: ChannelConnectionWhereInput
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    cursor?: ChannelConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelConnectionScalarFieldEnum | ChannelConnectionScalarFieldEnum[]
  }


  /**
   * User.userConnections
   */
  export type User$userConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    where?: UserConnectionWhereInput
    orderBy?: UserConnectionOrderByWithRelationInput | UserConnectionOrderByWithRelationInput[]
    cursor?: UserConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserConnectionScalarFieldEnum | UserConnectionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model UserConnection
   */

  export type AggregateUserConnection = {
    _count: UserConnectionCountAggregateOutputType | null
    _avg: UserConnectionAvgAggregateOutputType | null
    _sum: UserConnectionSumAggregateOutputType | null
    _min: UserConnectionMinAggregateOutputType | null
    _max: UserConnectionMaxAggregateOutputType | null
  }

  export type UserConnectionAvgAggregateOutputType = {
    id: number | null
    targetId: number | null
    followed: number | null
    blocked: number | null
    fromId: number | null
  }

  export type UserConnectionSumAggregateOutputType = {
    id: number | null
    targetId: number | null
    followed: number | null
    blocked: number | null
    fromId: number | null
  }

  export type UserConnectionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    targetId: number | null
    followed: number | null
    blocked: number | null
    fromId: number | null
  }

  export type UserConnectionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    targetId: number | null
    followed: number | null
    blocked: number | null
    fromId: number | null
  }

  export type UserConnectionCountAggregateOutputType = {
    id: number
    createdAt: number
    targetId: number
    followed: number
    blocked: number
    fromId: number
    _all: number
  }


  export type UserConnectionAvgAggregateInputType = {
    id?: true
    targetId?: true
    followed?: true
    blocked?: true
    fromId?: true
  }

  export type UserConnectionSumAggregateInputType = {
    id?: true
    targetId?: true
    followed?: true
    blocked?: true
    fromId?: true
  }

  export type UserConnectionMinAggregateInputType = {
    id?: true
    createdAt?: true
    targetId?: true
    followed?: true
    blocked?: true
    fromId?: true
  }

  export type UserConnectionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    targetId?: true
    followed?: true
    blocked?: true
    fromId?: true
  }

  export type UserConnectionCountAggregateInputType = {
    id?: true
    createdAt?: true
    targetId?: true
    followed?: true
    blocked?: true
    fromId?: true
    _all?: true
  }

  export type UserConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConnection to aggregate.
     */
    where?: UserConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConnections to fetch.
     */
    orderBy?: UserConnectionOrderByWithRelationInput | UserConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserConnections
    **/
    _count?: true | UserConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserConnectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserConnectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserConnectionMaxAggregateInputType
  }

  export type GetUserConnectionAggregateType<T extends UserConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserConnection[P]>
      : GetScalarType<T[P], AggregateUserConnection[P]>
  }




  export type UserConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConnectionWhereInput
    orderBy?: UserConnectionOrderByWithAggregationInput | UserConnectionOrderByWithAggregationInput[]
    by: UserConnectionScalarFieldEnum[] | UserConnectionScalarFieldEnum
    having?: UserConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserConnectionCountAggregateInputType | true
    _avg?: UserConnectionAvgAggregateInputType
    _sum?: UserConnectionSumAggregateInputType
    _min?: UserConnectionMinAggregateInputType
    _max?: UserConnectionMaxAggregateInputType
  }

  export type UserConnectionGroupByOutputType = {
    id: number
    createdAt: Date
    targetId: number
    followed: number
    blocked: number
    fromId: number
    _count: UserConnectionCountAggregateOutputType | null
    _avg: UserConnectionAvgAggregateOutputType | null
    _sum: UserConnectionSumAggregateOutputType | null
    _min: UserConnectionMinAggregateOutputType | null
    _max: UserConnectionMaxAggregateOutputType | null
  }

  type GetUserConnectionGroupByPayload<T extends UserConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], UserConnectionGroupByOutputType[P]>
        }
      >
    >


  export type UserConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    targetId?: boolean
    followed?: boolean
    blocked?: boolean
    fromId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userConnection"]>

  export type UserConnectionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    targetId?: boolean
    followed?: boolean
    blocked?: boolean
    fromId?: boolean
  }

  export type UserConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserConnection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      targetId: number
      followed: number
      blocked: number
      fromId: number
    }, ExtArgs["result"]["userConnection"]>
    composites: {}
  }


  type UserConnectionGetPayload<S extends boolean | null | undefined | UserConnectionDefaultArgs> = $Result.GetResult<Prisma.$UserConnectionPayload, S>

  type UserConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserConnectionFindManyArgs, 'select' | 'include'> & {
      select?: UserConnectionCountAggregateInputType | true
    }

  export interface UserConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserConnection'], meta: { name: 'UserConnection' } }
    /**
     * Find zero or one UserConnection that matches the filter.
     * @param {UserConnectionFindUniqueArgs} args - Arguments to find a UserConnection
     * @example
     * // Get one UserConnection
     * const userConnection = await prisma.userConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserConnectionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionFindUniqueArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserConnection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserConnectionFindUniqueOrThrowArgs} args - Arguments to find a UserConnection
     * @example
     * // Get one UserConnection
     * const userConnection = await prisma.userConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserConnectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionFindFirstArgs} args - Arguments to find a UserConnection
     * @example
     * // Get one UserConnection
     * const userConnection = await prisma.userConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserConnectionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionFindFirstArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionFindFirstOrThrowArgs} args - Arguments to find a UserConnection
     * @example
     * // Get one UserConnection
     * const userConnection = await prisma.userConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserConnectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserConnections
     * const userConnections = await prisma.userConnection.findMany()
     * 
     * // Get first 10 UserConnections
     * const userConnections = await prisma.userConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userConnectionWithIdOnly = await prisma.userConnection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserConnectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserConnection.
     * @param {UserConnectionCreateArgs} args - Arguments to create a UserConnection.
     * @example
     * // Create one UserConnection
     * const UserConnection = await prisma.userConnection.create({
     *   data: {
     *     // ... data to create a UserConnection
     *   }
     * })
     * 
    **/
    create<T extends UserConnectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionCreateArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserConnections.
     *     @param {UserConnectionCreateManyArgs} args - Arguments to create many UserConnections.
     *     @example
     *     // Create many UserConnections
     *     const userConnection = await prisma.userConnection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserConnectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserConnection.
     * @param {UserConnectionDeleteArgs} args - Arguments to delete one UserConnection.
     * @example
     * // Delete one UserConnection
     * const UserConnection = await prisma.userConnection.delete({
     *   where: {
     *     // ... filter to delete one UserConnection
     *   }
     * })
     * 
    **/
    delete<T extends UserConnectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionDeleteArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserConnection.
     * @param {UserConnectionUpdateArgs} args - Arguments to update one UserConnection.
     * @example
     * // Update one UserConnection
     * const userConnection = await prisma.userConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserConnectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionUpdateArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserConnections.
     * @param {UserConnectionDeleteManyArgs} args - Arguments to filter UserConnections to delete.
     * @example
     * // Delete a few UserConnections
     * const { count } = await prisma.userConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserConnectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserConnectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserConnections
     * const userConnection = await prisma.userConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserConnectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserConnection.
     * @param {UserConnectionUpsertArgs} args - Arguments to update or create a UserConnection.
     * @example
     * // Update or create a UserConnection
     * const userConnection = await prisma.userConnection.upsert({
     *   create: {
     *     // ... data to create a UserConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserConnection we want to update
     *   }
     * })
    **/
    upsert<T extends UserConnectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserConnectionUpsertArgs<ExtArgs>>
    ): Prisma__UserConnectionClient<$Result.GetResult<Prisma.$UserConnectionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionCountArgs} args - Arguments to filter UserConnections to count.
     * @example
     * // Count the number of UserConnections
     * const count = await prisma.userConnection.count({
     *   where: {
     *     // ... the filter for the UserConnections we want to count
     *   }
     * })
    **/
    count<T extends UserConnectionCountArgs>(
      args?: Subset<T, UserConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserConnectionAggregateArgs>(args: Subset<T, UserConnectionAggregateArgs>): Prisma.PrismaPromise<GetUserConnectionAggregateType<T>>

    /**
     * Group by UserConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserConnectionGroupByArgs['orderBy'] }
        : { orderBy?: UserConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserConnection model
   */
  readonly fields: UserConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserConnection model
   */ 
  interface UserConnectionFieldRefs {
    readonly id: FieldRef<"UserConnection", 'Int'>
    readonly createdAt: FieldRef<"UserConnection", 'DateTime'>
    readonly targetId: FieldRef<"UserConnection", 'Int'>
    readonly followed: FieldRef<"UserConnection", 'Int'>
    readonly blocked: FieldRef<"UserConnection", 'Int'>
    readonly fromId: FieldRef<"UserConnection", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * UserConnection findUnique
   */
  export type UserConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter, which UserConnection to fetch.
     */
    where: UserConnectionWhereUniqueInput
  }


  /**
   * UserConnection findUniqueOrThrow
   */
  export type UserConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter, which UserConnection to fetch.
     */
    where: UserConnectionWhereUniqueInput
  }


  /**
   * UserConnection findFirst
   */
  export type UserConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter, which UserConnection to fetch.
     */
    where?: UserConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConnections to fetch.
     */
    orderBy?: UserConnectionOrderByWithRelationInput | UserConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConnections.
     */
    cursor?: UserConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConnections.
     */
    distinct?: UserConnectionScalarFieldEnum | UserConnectionScalarFieldEnum[]
  }


  /**
   * UserConnection findFirstOrThrow
   */
  export type UserConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter, which UserConnection to fetch.
     */
    where?: UserConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConnections to fetch.
     */
    orderBy?: UserConnectionOrderByWithRelationInput | UserConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConnections.
     */
    cursor?: UserConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConnections.
     */
    distinct?: UserConnectionScalarFieldEnum | UserConnectionScalarFieldEnum[]
  }


  /**
   * UserConnection findMany
   */
  export type UserConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter, which UserConnections to fetch.
     */
    where?: UserConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConnections to fetch.
     */
    orderBy?: UserConnectionOrderByWithRelationInput | UserConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserConnections.
     */
    cursor?: UserConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConnections.
     */
    skip?: number
    distinct?: UserConnectionScalarFieldEnum | UserConnectionScalarFieldEnum[]
  }


  /**
   * UserConnection create
   */
  export type UserConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserConnection.
     */
    data: XOR<UserConnectionCreateInput, UserConnectionUncheckedCreateInput>
  }


  /**
   * UserConnection createMany
   */
  export type UserConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserConnections.
     */
    data: UserConnectionCreateManyInput | UserConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserConnection update
   */
  export type UserConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserConnection.
     */
    data: XOR<UserConnectionUpdateInput, UserConnectionUncheckedUpdateInput>
    /**
     * Choose, which UserConnection to update.
     */
    where: UserConnectionWhereUniqueInput
  }


  /**
   * UserConnection updateMany
   */
  export type UserConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserConnections.
     */
    data: XOR<UserConnectionUpdateManyMutationInput, UserConnectionUncheckedUpdateManyInput>
    /**
     * Filter which UserConnections to update
     */
    where?: UserConnectionWhereInput
  }


  /**
   * UserConnection upsert
   */
  export type UserConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserConnection to update in case it exists.
     */
    where: UserConnectionWhereUniqueInput
    /**
     * In case the UserConnection found by the `where` argument doesn't exist, create a new UserConnection with this data.
     */
    create: XOR<UserConnectionCreateInput, UserConnectionUncheckedCreateInput>
    /**
     * In case the UserConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserConnectionUpdateInput, UserConnectionUncheckedUpdateInput>
  }


  /**
   * UserConnection delete
   */
  export type UserConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
    /**
     * Filter which UserConnection to delete.
     */
    where: UserConnectionWhereUniqueInput
  }


  /**
   * UserConnection deleteMany
   */
  export type UserConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConnections to delete
     */
    where?: UserConnectionWhereInput
  }


  /**
   * UserConnection without action
   */
  export type UserConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConnection
     */
    select?: UserConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserConnectionInclude<ExtArgs> | null
  }



  /**
   * Model ChannelConnection
   */

  export type AggregateChannelConnection = {
    _count: ChannelConnectionCountAggregateOutputType | null
    _avg: ChannelConnectionAvgAggregateOutputType | null
    _sum: ChannelConnectionSumAggregateOutputType | null
    _min: ChannelConnectionMinAggregateOutputType | null
    _max: ChannelConnectionMaxAggregateOutputType | null
  }

  export type ChannelConnectionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    muted: number | null
  }

  export type ChannelConnectionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    muted: number | null
  }

  export type ChannelConnectionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    role: $Enums.ChannelRole | null
    userId: number | null
    channelId: number | null
    muted: number | null
  }

  export type ChannelConnectionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    role: $Enums.ChannelRole | null
    userId: number | null
    channelId: number | null
    muted: number | null
  }

  export type ChannelConnectionCountAggregateOutputType = {
    id: number
    createdAt: number
    role: number
    userId: number
    channelId: number
    muted: number
    _all: number
  }


  export type ChannelConnectionAvgAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    muted?: true
  }

  export type ChannelConnectionSumAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    muted?: true
  }

  export type ChannelConnectionMinAggregateInputType = {
    id?: true
    createdAt?: true
    role?: true
    userId?: true
    channelId?: true
    muted?: true
  }

  export type ChannelConnectionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    role?: true
    userId?: true
    channelId?: true
    muted?: true
  }

  export type ChannelConnectionCountAggregateInputType = {
    id?: true
    createdAt?: true
    role?: true
    userId?: true
    channelId?: true
    muted?: true
    _all?: true
  }

  export type ChannelConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelConnection to aggregate.
     */
    where?: ChannelConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelConnections to fetch.
     */
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelConnections
    **/
    _count?: true | ChannelConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelConnectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelConnectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelConnectionMaxAggregateInputType
  }

  export type GetChannelConnectionAggregateType<T extends ChannelConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelConnection[P]>
      : GetScalarType<T[P], AggregateChannelConnection[P]>
  }




  export type ChannelConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelConnectionWhereInput
    orderBy?: ChannelConnectionOrderByWithAggregationInput | ChannelConnectionOrderByWithAggregationInput[]
    by: ChannelConnectionScalarFieldEnum[] | ChannelConnectionScalarFieldEnum
    having?: ChannelConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelConnectionCountAggregateInputType | true
    _avg?: ChannelConnectionAvgAggregateInputType
    _sum?: ChannelConnectionSumAggregateInputType
    _min?: ChannelConnectionMinAggregateInputType
    _max?: ChannelConnectionMaxAggregateInputType
  }

  export type ChannelConnectionGroupByOutputType = {
    id: number
    createdAt: Date
    role: $Enums.ChannelRole
    userId: number
    channelId: number
    muted: number
    _count: ChannelConnectionCountAggregateOutputType | null
    _avg: ChannelConnectionAvgAggregateOutputType | null
    _sum: ChannelConnectionSumAggregateOutputType | null
    _min: ChannelConnectionMinAggregateOutputType | null
    _max: ChannelConnectionMaxAggregateOutputType | null
  }

  type GetChannelConnectionGroupByPayload<T extends ChannelConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelConnectionGroupByOutputType[P]>
        }
      >
    >


  export type ChannelConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    role?: boolean
    userId?: boolean
    channelId?: boolean
    muted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channelConnection"]>

  export type ChannelConnectionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    role?: boolean
    userId?: boolean
    channelId?: boolean
    muted?: boolean
  }

  export type ChannelConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }


  export type $ChannelConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChannelConnection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      role: $Enums.ChannelRole
      userId: number
      channelId: number
      muted: number
    }, ExtArgs["result"]["channelConnection"]>
    composites: {}
  }


  type ChannelConnectionGetPayload<S extends boolean | null | undefined | ChannelConnectionDefaultArgs> = $Result.GetResult<Prisma.$ChannelConnectionPayload, S>

  type ChannelConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChannelConnectionFindManyArgs, 'select' | 'include'> & {
      select?: ChannelConnectionCountAggregateInputType | true
    }

  export interface ChannelConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelConnection'], meta: { name: 'ChannelConnection' } }
    /**
     * Find zero or one ChannelConnection that matches the filter.
     * @param {ChannelConnectionFindUniqueArgs} args - Arguments to find a ChannelConnection
     * @example
     * // Get one ChannelConnection
     * const channelConnection = await prisma.channelConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelConnectionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChannelConnection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelConnectionFindUniqueOrThrowArgs} args - Arguments to find a ChannelConnection
     * @example
     * // Get one ChannelConnection
     * const channelConnection = await prisma.channelConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelConnectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChannelConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionFindFirstArgs} args - Arguments to find a ChannelConnection
     * @example
     * // Get one ChannelConnection
     * const channelConnection = await prisma.channelConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelConnectionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChannelConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionFindFirstOrThrowArgs} args - Arguments to find a ChannelConnection
     * @example
     * // Get one ChannelConnection
     * const channelConnection = await prisma.channelConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelConnectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChannelConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelConnections
     * const channelConnections = await prisma.channelConnection.findMany()
     * 
     * // Get first 10 ChannelConnections
     * const channelConnections = await prisma.channelConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelConnectionWithIdOnly = await prisma.channelConnection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelConnectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChannelConnection.
     * @param {ChannelConnectionCreateArgs} args - Arguments to create a ChannelConnection.
     * @example
     * // Create one ChannelConnection
     * const ChannelConnection = await prisma.channelConnection.create({
     *   data: {
     *     // ... data to create a ChannelConnection
     *   }
     * })
     * 
    **/
    create<T extends ChannelConnectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionCreateArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChannelConnections.
     *     @param {ChannelConnectionCreateManyArgs} args - Arguments to create many ChannelConnections.
     *     @example
     *     // Create many ChannelConnections
     *     const channelConnection = await prisma.channelConnection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelConnectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelConnection.
     * @param {ChannelConnectionDeleteArgs} args - Arguments to delete one ChannelConnection.
     * @example
     * // Delete one ChannelConnection
     * const ChannelConnection = await prisma.channelConnection.delete({
     *   where: {
     *     // ... filter to delete one ChannelConnection
     *   }
     * })
     * 
    **/
    delete<T extends ChannelConnectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionDeleteArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChannelConnection.
     * @param {ChannelConnectionUpdateArgs} args - Arguments to update one ChannelConnection.
     * @example
     * // Update one ChannelConnection
     * const channelConnection = await prisma.channelConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelConnectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionUpdateArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChannelConnections.
     * @param {ChannelConnectionDeleteManyArgs} args - Arguments to filter ChannelConnections to delete.
     * @example
     * // Delete a few ChannelConnections
     * const { count } = await prisma.channelConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelConnectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelConnectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelConnections
     * const channelConnection = await prisma.channelConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelConnectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelConnection.
     * @param {ChannelConnectionUpsertArgs} args - Arguments to update or create a ChannelConnection.
     * @example
     * // Update or create a ChannelConnection
     * const channelConnection = await prisma.channelConnection.upsert({
     *   create: {
     *     // ... data to create a ChannelConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelConnection we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelConnectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelConnectionUpsertArgs<ExtArgs>>
    ): Prisma__ChannelConnectionClient<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChannelConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionCountArgs} args - Arguments to filter ChannelConnections to count.
     * @example
     * // Count the number of ChannelConnections
     * const count = await prisma.channelConnection.count({
     *   where: {
     *     // ... the filter for the ChannelConnections we want to count
     *   }
     * })
    **/
    count<T extends ChannelConnectionCountArgs>(
      args?: Subset<T, ChannelConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelConnectionAggregateArgs>(args: Subset<T, ChannelConnectionAggregateArgs>): Prisma.PrismaPromise<GetChannelConnectionAggregateType<T>>

    /**
     * Group by ChannelConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelConnectionGroupByArgs['orderBy'] }
        : { orderBy?: ChannelConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChannelConnection model
   */
  readonly fields: ChannelConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChannelConnection model
   */ 
  interface ChannelConnectionFieldRefs {
    readonly id: FieldRef<"ChannelConnection", 'Int'>
    readonly createdAt: FieldRef<"ChannelConnection", 'DateTime'>
    readonly role: FieldRef<"ChannelConnection", 'ChannelRole'>
    readonly userId: FieldRef<"ChannelConnection", 'Int'>
    readonly channelId: FieldRef<"ChannelConnection", 'Int'>
    readonly muted: FieldRef<"ChannelConnection", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ChannelConnection findUnique
   */
  export type ChannelConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter, which ChannelConnection to fetch.
     */
    where: ChannelConnectionWhereUniqueInput
  }


  /**
   * ChannelConnection findUniqueOrThrow
   */
  export type ChannelConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter, which ChannelConnection to fetch.
     */
    where: ChannelConnectionWhereUniqueInput
  }


  /**
   * ChannelConnection findFirst
   */
  export type ChannelConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter, which ChannelConnection to fetch.
     */
    where?: ChannelConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelConnections to fetch.
     */
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelConnections.
     */
    cursor?: ChannelConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelConnections.
     */
    distinct?: ChannelConnectionScalarFieldEnum | ChannelConnectionScalarFieldEnum[]
  }


  /**
   * ChannelConnection findFirstOrThrow
   */
  export type ChannelConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter, which ChannelConnection to fetch.
     */
    where?: ChannelConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelConnections to fetch.
     */
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelConnections.
     */
    cursor?: ChannelConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelConnections.
     */
    distinct?: ChannelConnectionScalarFieldEnum | ChannelConnectionScalarFieldEnum[]
  }


  /**
   * ChannelConnection findMany
   */
  export type ChannelConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter, which ChannelConnections to fetch.
     */
    where?: ChannelConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelConnections to fetch.
     */
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelConnections.
     */
    cursor?: ChannelConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelConnections.
     */
    skip?: number
    distinct?: ChannelConnectionScalarFieldEnum | ChannelConnectionScalarFieldEnum[]
  }


  /**
   * ChannelConnection create
   */
  export type ChannelConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChannelConnection.
     */
    data: XOR<ChannelConnectionCreateInput, ChannelConnectionUncheckedCreateInput>
  }


  /**
   * ChannelConnection createMany
   */
  export type ChannelConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChannelConnections.
     */
    data: ChannelConnectionCreateManyInput | ChannelConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChannelConnection update
   */
  export type ChannelConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChannelConnection.
     */
    data: XOR<ChannelConnectionUpdateInput, ChannelConnectionUncheckedUpdateInput>
    /**
     * Choose, which ChannelConnection to update.
     */
    where: ChannelConnectionWhereUniqueInput
  }


  /**
   * ChannelConnection updateMany
   */
  export type ChannelConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChannelConnections.
     */
    data: XOR<ChannelConnectionUpdateManyMutationInput, ChannelConnectionUncheckedUpdateManyInput>
    /**
     * Filter which ChannelConnections to update
     */
    where?: ChannelConnectionWhereInput
  }


  /**
   * ChannelConnection upsert
   */
  export type ChannelConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChannelConnection to update in case it exists.
     */
    where: ChannelConnectionWhereUniqueInput
    /**
     * In case the ChannelConnection found by the `where` argument doesn't exist, create a new ChannelConnection with this data.
     */
    create: XOR<ChannelConnectionCreateInput, ChannelConnectionUncheckedCreateInput>
    /**
     * In case the ChannelConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelConnectionUpdateInput, ChannelConnectionUncheckedUpdateInput>
  }


  /**
   * ChannelConnection delete
   */
  export type ChannelConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    /**
     * Filter which ChannelConnection to delete.
     */
    where: ChannelConnectionWhereUniqueInput
  }


  /**
   * ChannelConnection deleteMany
   */
  export type ChannelConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelConnections to delete
     */
    where?: ChannelConnectionWhereInput
  }


  /**
   * ChannelConnection without action
   */
  export type ChannelConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    channelId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    channelId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    senderId: number | null
    senderLogin: string | null
    channelId: number | null
    content: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    senderId: number | null
    senderLogin: string | null
    channelId: number | null
    content: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    senderLogin: number
    channelId: number
    content: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    channelId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    senderId?: true
    channelId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    senderLogin?: true
    channelId?: true
    content?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    senderLogin?: true
    channelId?: true
    content?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    senderLogin?: true
    channelId?: true
    content?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    senderId: number
    senderLogin: string
    channelId: number
    content: string
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    senderLogin?: boolean
    channelId?: boolean
    content?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    senderLogin?: boolean
    channelId?: boolean
    content?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      senderId: number
      senderLogin: string
      channelId: number
      content: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly senderId: FieldRef<"Message", 'Int'>
    readonly senderLogin: FieldRef<"Message", 'String'>
    readonly channelId: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model Channel
   */

  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    id: number | null
    banned: number | null
    invited: number | null
  }

  export type ChannelSumAggregateOutputType = {
    id: number | null
    banned: number[]
    invited: number[]
  }

  export type ChannelMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    password: string | null
    type: $Enums.ChannelType | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    password: string | null
    type: $Enums.ChannelType | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    banned: number
    invited: number
    createdAt: number
    name: number
    password: number
    type: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    id?: true
    banned?: true
    invited?: true
  }

  export type ChannelSumAggregateInputType = {
    id?: true
    banned?: true
    invited?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    password?: true
    type?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    password?: true
    type?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    banned?: true
    invited?: true
    createdAt?: true
    name?: true
    password?: true
    type?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }

  export type ChannelGroupByOutputType = {
    id: number
    banned: number[]
    invited: number[]
    createdAt: Date
    name: string
    password: string
    type: $Enums.ChannelType
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    banned?: boolean
    invited?: boolean
    createdAt?: boolean
    name?: boolean
    password?: boolean
    type?: boolean
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    channelConnections?: boolean | Channel$channelConnectionsArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id?: boolean
    banned?: boolean
    invited?: boolean
    createdAt?: boolean
    name?: boolean
    password?: boolean
    type?: boolean
  }

  export type ChannelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    channelConnections?: boolean | Channel$channelConnectionsArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChannelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Channel"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      channelConnections: Prisma.$ChannelConnectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      banned: number[]
      invited: number[]
      createdAt: Date
      name: string
      password: string
      type: $Enums.ChannelType
    }, ExtArgs["result"]["channel"]>
    composites: {}
  }


  type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = $Result.GetResult<Prisma.$ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    messages<T extends Channel$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Channel$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    channelConnections<T extends Channel$channelConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Channel$channelConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelConnectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id: FieldRef<"Channel", 'Int'>
    readonly banned: FieldRef<"Channel", 'Int[]'>
    readonly invited: FieldRef<"Channel", 'Int[]'>
    readonly createdAt: FieldRef<"Channel", 'DateTime'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly password: FieldRef<"Channel", 'String'>
    readonly type: FieldRef<"Channel", 'ChannelType'>
  }
    

  // Custom InputTypes

  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.messages
   */
  export type Channel$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Channel.channelConnections
   */
  export type Channel$channelConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelConnection
     */
    select?: ChannelConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelConnectionInclude<ExtArgs> | null
    where?: ChannelConnectionWhereInput
    orderBy?: ChannelConnectionOrderByWithRelationInput | ChannelConnectionOrderByWithRelationInput[]
    cursor?: ChannelConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelConnectionScalarFieldEnum | ChannelConnectionScalarFieldEnum[]
  }


  /**
   * Channel without action
   */
  export type ChannelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hash: 'hash',
    login: 'login',
    socket: 'socket'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserConnectionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    targetId: 'targetId',
    followed: 'followed',
    blocked: 'blocked',
    fromId: 'fromId'
  };

  export type UserConnectionScalarFieldEnum = (typeof UserConnectionScalarFieldEnum)[keyof typeof UserConnectionScalarFieldEnum]


  export const ChannelConnectionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    role: 'role',
    userId: 'userId',
    channelId: 'channelId',
    muted: 'muted'
  };

  export type ChannelConnectionScalarFieldEnum = (typeof ChannelConnectionScalarFieldEnum)[keyof typeof ChannelConnectionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    senderLogin: 'senderLogin',
    channelId: 'channelId',
    content: 'content'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    banned: 'banned',
    invited: 'invited',
    createdAt: 'createdAt',
    name: 'name',
    password: 'password',
    type: 'type'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ChannelRole'
   */
  export type EnumChannelRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelRole'>
    


  /**
   * Reference to a field of type 'ChannelRole[]'
   */
  export type ListEnumChannelRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelRole[]'>
    


  /**
   * Reference to a field of type 'ChannelType'
   */
  export type EnumChannelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelType'>
    


  /**
   * Reference to a field of type 'ChannelType[]'
   */
  export type ListEnumChannelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hash?: StringFilter<"User"> | string
    login?: StringFilter<"User"> | string
    socket?: StringNullableFilter<"User"> | string | null
    messages?: MessageListRelationFilter
    channelConnections?: ChannelConnectionListRelationFilter
    userConnections?: UserConnectionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    login?: SortOrder
    socket?: SortOrderInput | SortOrder
    messages?: MessageOrderByRelationAggregateInput
    channelConnections?: ChannelConnectionOrderByRelationAggregateInput
    userConnections?: UserConnectionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    login?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hash?: StringFilter<"User"> | string
    socket?: StringNullableFilter<"User"> | string | null
    messages?: MessageListRelationFilter
    channelConnections?: ChannelConnectionListRelationFilter
    userConnections?: UserConnectionListRelationFilter
  }, "id" | "login">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    login?: SortOrder
    socket?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    hash?: StringWithAggregatesFilter<"User"> | string
    login?: StringWithAggregatesFilter<"User"> | string
    socket?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type UserConnectionWhereInput = {
    AND?: UserConnectionWhereInput | UserConnectionWhereInput[]
    OR?: UserConnectionWhereInput[]
    NOT?: UserConnectionWhereInput | UserConnectionWhereInput[]
    id?: IntFilter<"UserConnection"> | number
    createdAt?: DateTimeFilter<"UserConnection"> | Date | string
    targetId?: IntFilter<"UserConnection"> | number
    followed?: IntFilter<"UserConnection"> | number
    blocked?: IntFilter<"UserConnection"> | number
    fromId?: IntFilter<"UserConnection"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserConnectionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserConnectionWhereInput | UserConnectionWhereInput[]
    OR?: UserConnectionWhereInput[]
    NOT?: UserConnectionWhereInput | UserConnectionWhereInput[]
    createdAt?: DateTimeFilter<"UserConnection"> | Date | string
    targetId?: IntFilter<"UserConnection"> | number
    followed?: IntFilter<"UserConnection"> | number
    blocked?: IntFilter<"UserConnection"> | number
    fromId?: IntFilter<"UserConnection"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
    _count?: UserConnectionCountOrderByAggregateInput
    _avg?: UserConnectionAvgOrderByAggregateInput
    _max?: UserConnectionMaxOrderByAggregateInput
    _min?: UserConnectionMinOrderByAggregateInput
    _sum?: UserConnectionSumOrderByAggregateInput
  }

  export type UserConnectionScalarWhereWithAggregatesInput = {
    AND?: UserConnectionScalarWhereWithAggregatesInput | UserConnectionScalarWhereWithAggregatesInput[]
    OR?: UserConnectionScalarWhereWithAggregatesInput[]
    NOT?: UserConnectionScalarWhereWithAggregatesInput | UserConnectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserConnection"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserConnection"> | Date | string
    targetId?: IntWithAggregatesFilter<"UserConnection"> | number
    followed?: IntWithAggregatesFilter<"UserConnection"> | number
    blocked?: IntWithAggregatesFilter<"UserConnection"> | number
    fromId?: IntWithAggregatesFilter<"UserConnection"> | number
  }

  export type ChannelConnectionWhereInput = {
    AND?: ChannelConnectionWhereInput | ChannelConnectionWhereInput[]
    OR?: ChannelConnectionWhereInput[]
    NOT?: ChannelConnectionWhereInput | ChannelConnectionWhereInput[]
    id?: IntFilter<"ChannelConnection"> | number
    createdAt?: DateTimeFilter<"ChannelConnection"> | Date | string
    role?: EnumChannelRoleFilter<"ChannelConnection"> | $Enums.ChannelRole
    userId?: IntFilter<"ChannelConnection"> | number
    channelId?: IntFilter<"ChannelConnection"> | number
    muted?: IntFilter<"ChannelConnection"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type ChannelConnectionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type ChannelConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChannelConnectionWhereInput | ChannelConnectionWhereInput[]
    OR?: ChannelConnectionWhereInput[]
    NOT?: ChannelConnectionWhereInput | ChannelConnectionWhereInput[]
    createdAt?: DateTimeFilter<"ChannelConnection"> | Date | string
    role?: EnumChannelRoleFilter<"ChannelConnection"> | $Enums.ChannelRole
    userId?: IntFilter<"ChannelConnection"> | number
    channelId?: IntFilter<"ChannelConnection"> | number
    muted?: IntFilter<"ChannelConnection"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }, "id">

  export type ChannelConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
    _count?: ChannelConnectionCountOrderByAggregateInput
    _avg?: ChannelConnectionAvgOrderByAggregateInput
    _max?: ChannelConnectionMaxOrderByAggregateInput
    _min?: ChannelConnectionMinOrderByAggregateInput
    _sum?: ChannelConnectionSumOrderByAggregateInput
  }

  export type ChannelConnectionScalarWhereWithAggregatesInput = {
    AND?: ChannelConnectionScalarWhereWithAggregatesInput | ChannelConnectionScalarWhereWithAggregatesInput[]
    OR?: ChannelConnectionScalarWhereWithAggregatesInput[]
    NOT?: ChannelConnectionScalarWhereWithAggregatesInput | ChannelConnectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChannelConnection"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ChannelConnection"> | Date | string
    role?: EnumChannelRoleWithAggregatesFilter<"ChannelConnection"> | $Enums.ChannelRole
    userId?: IntWithAggregatesFilter<"ChannelConnection"> | number
    channelId?: IntWithAggregatesFilter<"ChannelConnection"> | number
    muted?: IntWithAggregatesFilter<"ChannelConnection"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    senderId?: IntFilter<"Message"> | number
    senderLogin?: StringFilter<"Message"> | string
    channelId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    senderLogin?: SortOrder
    channelId?: SortOrder
    content?: SortOrder
    author?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: IntFilter<"Message"> | number
    senderLogin?: StringFilter<"Message"> | string
    channelId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    senderLogin?: SortOrder
    channelId?: SortOrder
    content?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    senderId?: IntWithAggregatesFilter<"Message"> | number
    senderLogin?: StringWithAggregatesFilter<"Message"> | string
    channelId?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id?: IntFilter<"Channel"> | number
    banned?: IntNullableListFilter<"Channel">
    invited?: IntNullableListFilter<"Channel">
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    name?: StringFilter<"Channel"> | string
    password?: StringFilter<"Channel"> | string
    type?: EnumChannelTypeFilter<"Channel"> | $Enums.ChannelType
    messages?: MessageListRelationFilter
    channelConnections?: ChannelConnectionListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    banned?: SortOrder
    invited?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    type?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
    channelConnections?: ChannelConnectionOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    banned?: IntNullableListFilter<"Channel">
    invited?: IntNullableListFilter<"Channel">
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    password?: StringFilter<"Channel"> | string
    type?: EnumChannelTypeFilter<"Channel"> | $Enums.ChannelType
    messages?: MessageListRelationFilter
    channelConnections?: ChannelConnectionListRelationFilter
  }, "id" | "name">

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    banned?: SortOrder
    invited?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    type?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Channel"> | number
    banned?: IntNullableListFilter<"Channel">
    invited?: IntNullableListFilter<"Channel">
    createdAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
    name?: StringWithAggregatesFilter<"Channel"> | string
    password?: StringWithAggregatesFilter<"Channel"> | string
    type?: EnumChannelTypeWithAggregatesFilter<"Channel"> | $Enums.ChannelType
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageCreateNestedManyWithoutAuthorInput
    channelConnections?: ChannelConnectionCreateNestedManyWithoutUserInput
    userConnections?: UserConnectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    channelConnections?: ChannelConnectionUncheckedCreateNestedManyWithoutUserInput
    userConnections?: UserConnectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    channelConnections?: ChannelConnectionUpdateManyWithoutUserNestedInput
    userConnections?: UserConnectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    channelConnections?: ChannelConnectionUncheckedUpdateManyWithoutUserNestedInput
    userConnections?: UserConnectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserConnectionCreateInput = {
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
    user: UserCreateNestedOneWithoutUserConnectionsInput
  }

  export type UserConnectionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
    fromId: number
  }

  export type UserConnectionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserConnectionsNestedInput
  }

  export type UserConnectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
    fromId?: IntFieldUpdateOperationsInput | number
  }

  export type UserConnectionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
    fromId: number
  }

  export type UserConnectionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
  }

  export type UserConnectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
    fromId?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelConnectionCreateInput = {
    createdAt?: Date | string
    role: $Enums.ChannelRole
    muted: number
    user: UserCreateNestedOneWithoutChannelConnectionsInput
    channel: ChannelCreateNestedOneWithoutChannelConnectionsInput
  }

  export type ChannelConnectionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    userId: number
    channelId: number
    muted: number
  }

  export type ChannelConnectionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    muted?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutChannelConnectionsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutChannelConnectionsNestedInput
  }

  export type ChannelConnectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelConnectionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    userId: number
    channelId: number
    muted: number
  }

  export type ChannelConnectionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelConnectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    senderLogin: string
    content: string
    author: UserCreateNestedOneWithoutMessagesInput
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    senderId: number
    senderLogin: string
    channelId: number
    content: string
  }

  export type MessageUpdateInput = {
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessagesNestedInput
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyInput = {
    id?: number
    senderId: number
    senderLogin: string
    channelId: number
    content: string
  }

  export type MessageUpdateManyMutationInput = {
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelCreateInput = {
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    messages?: MessageCreateNestedManyWithoutChannelInput
    channelConnections?: ChannelConnectionCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: number
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
    channelConnections?: ChannelConnectionUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    messages?: MessageUpdateManyWithoutChannelNestedInput
    channelConnections?: ChannelConnectionUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
    channelConnections?: ChannelConnectionUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: number
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
  }

  export type ChannelUpdateManyMutationInput = {
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ChannelConnectionListRelationFilter = {
    every?: ChannelConnectionWhereInput
    some?: ChannelConnectionWhereInput
    none?: ChannelConnectionWhereInput
  }

  export type UserConnectionListRelationFilter = {
    every?: UserConnectionWhereInput
    some?: UserConnectionWhereInput
    none?: UserConnectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    login?: SortOrder
    socket?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    login?: SortOrder
    socket?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hash?: SortOrder
    login?: SortOrder
    socket?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
  }

  export type UserConnectionAvgOrderByAggregateInput = {
    id?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
  }

  export type UserConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
  }

  export type UserConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
  }

  export type UserConnectionSumOrderByAggregateInput = {
    id?: SortOrder
    targetId?: SortOrder
    followed?: SortOrder
    blocked?: SortOrder
    fromId?: SortOrder
  }

  export type EnumChannelRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelRole | EnumChannelRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelRoleFilter<$PrismaModel> | $Enums.ChannelRole
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type ChannelConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
  }

  export type ChannelConnectionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
  }

  export type ChannelConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
  }

  export type ChannelConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
  }

  export type ChannelConnectionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    muted?: SortOrder
  }

  export type EnumChannelRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelRole | EnumChannelRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChannelRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelRoleFilter<$PrismaModel>
    _max?: NestedEnumChannelRoleFilter<$PrismaModel>
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    senderLogin?: SortOrder
    channelId?: SortOrder
    content?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    channelId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    senderLogin?: SortOrder
    channelId?: SortOrder
    content?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    senderLogin?: SortOrder
    channelId?: SortOrder
    content?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    channelId?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumChannelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeFilter<$PrismaModel> | $Enums.ChannelType
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    banned?: SortOrder
    invited?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    type?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    id?: SortOrder
    banned?: SortOrder
    invited?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    type?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    password?: SortOrder
    type?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    id?: SortOrder
    banned?: SortOrder
    invited?: SortOrder
  }

  export type EnumChannelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChannelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelTypeFilter<$PrismaModel>
    _max?: NestedEnumChannelTypeFilter<$PrismaModel>
  }

  export type MessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChannelConnectionCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput> | ChannelConnectionCreateWithoutUserInput[] | ChannelConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutUserInput | ChannelConnectionCreateOrConnectWithoutUserInput[]
    createMany?: ChannelConnectionCreateManyUserInputEnvelope
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
  }

  export type UserConnectionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput> | UserConnectionCreateWithoutUserInput[] | UserConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConnectionCreateOrConnectWithoutUserInput | UserConnectionCreateOrConnectWithoutUserInput[]
    createMany?: UserConnectionCreateManyUserInputEnvelope
    connect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChannelConnectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput> | ChannelConnectionCreateWithoutUserInput[] | ChannelConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutUserInput | ChannelConnectionCreateOrConnectWithoutUserInput[]
    createMany?: ChannelConnectionCreateManyUserInputEnvelope
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
  }

  export type UserConnectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput> | UserConnectionCreateWithoutUserInput[] | UserConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConnectionCreateOrConnectWithoutUserInput | UserConnectionCreateOrConnectWithoutUserInput[]
    createMany?: UserConnectionCreateManyUserInputEnvelope
    connect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAuthorInput | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAuthorInput | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAuthorInput | MessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChannelConnectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput> | ChannelConnectionCreateWithoutUserInput[] | ChannelConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutUserInput | ChannelConnectionCreateOrConnectWithoutUserInput[]
    upsert?: ChannelConnectionUpsertWithWhereUniqueWithoutUserInput | ChannelConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelConnectionCreateManyUserInputEnvelope
    set?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    disconnect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    delete?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    update?: ChannelConnectionUpdateWithWhereUniqueWithoutUserInput | ChannelConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelConnectionUpdateManyWithWhereWithoutUserInput | ChannelConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
  }

  export type UserConnectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput> | UserConnectionCreateWithoutUserInput[] | UserConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConnectionCreateOrConnectWithoutUserInput | UserConnectionCreateOrConnectWithoutUserInput[]
    upsert?: UserConnectionUpsertWithWhereUniqueWithoutUserInput | UserConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConnectionCreateManyUserInputEnvelope
    set?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    disconnect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    delete?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    connect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    update?: UserConnectionUpdateWithWhereUniqueWithoutUserInput | UserConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConnectionUpdateManyWithWhereWithoutUserInput | UserConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConnectionScalarWhereInput | UserConnectionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput> | MessageCreateWithoutAuthorInput[] | MessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutAuthorInput | MessageCreateOrConnectWithoutAuthorInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutAuthorInput | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutAuthorInput | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutAuthorInput | MessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChannelConnectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput> | ChannelConnectionCreateWithoutUserInput[] | ChannelConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutUserInput | ChannelConnectionCreateOrConnectWithoutUserInput[]
    upsert?: ChannelConnectionUpsertWithWhereUniqueWithoutUserInput | ChannelConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelConnectionCreateManyUserInputEnvelope
    set?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    disconnect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    delete?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    update?: ChannelConnectionUpdateWithWhereUniqueWithoutUserInput | ChannelConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelConnectionUpdateManyWithWhereWithoutUserInput | ChannelConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
  }

  export type UserConnectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput> | UserConnectionCreateWithoutUserInput[] | UserConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConnectionCreateOrConnectWithoutUserInput | UserConnectionCreateOrConnectWithoutUserInput[]
    upsert?: UserConnectionUpsertWithWhereUniqueWithoutUserInput | UserConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConnectionCreateManyUserInputEnvelope
    set?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    disconnect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    delete?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    connect?: UserConnectionWhereUniqueInput | UserConnectionWhereUniqueInput[]
    update?: UserConnectionUpdateWithWhereUniqueWithoutUserInput | UserConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConnectionUpdateManyWithWhereWithoutUserInput | UserConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConnectionScalarWhereInput | UserConnectionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserConnectionsInput = {
    create?: XOR<UserCreateWithoutUserConnectionsInput, UserUncheckedCreateWithoutUserConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserConnectionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserConnectionsNestedInput = {
    create?: XOR<UserCreateWithoutUserConnectionsInput, UserUncheckedCreateWithoutUserConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserConnectionsInput
    upsert?: UserUpsertWithoutUserConnectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserConnectionsInput, UserUpdateWithoutUserConnectionsInput>, UserUncheckedUpdateWithoutUserConnectionsInput>
  }

  export type UserCreateNestedOneWithoutChannelConnectionsInput = {
    create?: XOR<UserCreateWithoutChannelConnectionsInput, UserUncheckedCreateWithoutChannelConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelConnectionsInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutChannelConnectionsInput = {
    create?: XOR<ChannelCreateWithoutChannelConnectionsInput, ChannelUncheckedCreateWithoutChannelConnectionsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelConnectionsInput
    connect?: ChannelWhereUniqueInput
  }

  export type EnumChannelRoleFieldUpdateOperationsInput = {
    set?: $Enums.ChannelRole
  }

  export type UserUpdateOneRequiredWithoutChannelConnectionsNestedInput = {
    create?: XOR<UserCreateWithoutChannelConnectionsInput, UserUncheckedCreateWithoutChannelConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelConnectionsInput
    upsert?: UserUpsertWithoutChannelConnectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelConnectionsInput, UserUpdateWithoutChannelConnectionsInput>, UserUncheckedUpdateWithoutChannelConnectionsInput>
  }

  export type ChannelUpdateOneRequiredWithoutChannelConnectionsNestedInput = {
    create?: XOR<ChannelCreateWithoutChannelConnectionsInput, ChannelUncheckedCreateWithoutChannelConnectionsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelConnectionsInput
    upsert?: ChannelUpsertWithoutChannelConnectionsInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutChannelConnectionsInput, ChannelUpdateWithoutChannelConnectionsInput>, ChannelUncheckedUpdateWithoutChannelConnectionsInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    upsert?: ChannelUpsertWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutMessagesInput, ChannelUpdateWithoutMessagesInput>, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelCreatebannedInput = {
    set: number[]
  }

  export type ChannelCreateinvitedInput = {
    set: number[]
  }

  export type MessageCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChannelConnectionCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput> | ChannelConnectionCreateWithoutChannelInput[] | ChannelConnectionUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutChannelInput | ChannelConnectionCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelConnectionCreateManyChannelInputEnvelope
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChannelConnectionUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput> | ChannelConnectionCreateWithoutChannelInput[] | ChannelConnectionUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutChannelInput | ChannelConnectionCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelConnectionCreateManyChannelInputEnvelope
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
  }

  export type ChannelUpdatebannedInput = {
    set?: number[]
    push?: number | number[]
  }

  export type ChannelUpdateinvitedInput = {
    set?: number[]
    push?: number | number[]
  }

  export type EnumChannelTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChannelType
  }

  export type MessageUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChannelConnectionUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput> | ChannelConnectionCreateWithoutChannelInput[] | ChannelConnectionUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutChannelInput | ChannelConnectionCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelConnectionUpsertWithWhereUniqueWithoutChannelInput | ChannelConnectionUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelConnectionCreateManyChannelInputEnvelope
    set?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    disconnect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    delete?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    update?: ChannelConnectionUpdateWithWhereUniqueWithoutChannelInput | ChannelConnectionUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelConnectionUpdateManyWithWhereWithoutChannelInput | ChannelConnectionUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput> | MessageCreateWithoutChannelInput[] | MessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChannelInput | MessageCreateOrConnectWithoutChannelInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChannelInput | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: MessageCreateManyChannelInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChannelInput | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChannelInput | MessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChannelConnectionUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput> | ChannelConnectionCreateWithoutChannelInput[] | ChannelConnectionUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelConnectionCreateOrConnectWithoutChannelInput | ChannelConnectionCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelConnectionUpsertWithWhereUniqueWithoutChannelInput | ChannelConnectionUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelConnectionCreateManyChannelInputEnvelope
    set?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    disconnect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    delete?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    connect?: ChannelConnectionWhereUniqueInput | ChannelConnectionWhereUniqueInput[]
    update?: ChannelConnectionUpdateWithWhereUniqueWithoutChannelInput | ChannelConnectionUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelConnectionUpdateManyWithWhereWithoutChannelInput | ChannelConnectionUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumChannelRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelRole | EnumChannelRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelRoleFilter<$PrismaModel> | $Enums.ChannelRole
  }

  export type NestedEnumChannelRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelRole | EnumChannelRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelRole[] | ListEnumChannelRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChannelRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelRoleFilter<$PrismaModel>
    _max?: NestedEnumChannelRoleFilter<$PrismaModel>
  }

  export type NestedEnumChannelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeFilter<$PrismaModel> | $Enums.ChannelType
  }

  export type NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChannelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelTypeFilter<$PrismaModel>
    _max?: NestedEnumChannelTypeFilter<$PrismaModel>
  }

  export type MessageCreateWithoutAuthorInput = {
    senderLogin: string
    content: string
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutAuthorInput = {
    id?: number
    senderLogin: string
    channelId: number
    content: string
  }

  export type MessageCreateOrConnectWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageCreateManyAuthorInputEnvelope = {
    data: MessageCreateManyAuthorInput | MessageCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ChannelConnectionCreateWithoutUserInput = {
    createdAt?: Date | string
    role: $Enums.ChannelRole
    muted: number
    channel: ChannelCreateNestedOneWithoutChannelConnectionsInput
  }

  export type ChannelConnectionUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    channelId: number
    muted: number
  }

  export type ChannelConnectionCreateOrConnectWithoutUserInput = {
    where: ChannelConnectionWhereUniqueInput
    create: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput>
  }

  export type ChannelConnectionCreateManyUserInputEnvelope = {
    data: ChannelConnectionCreateManyUserInput | ChannelConnectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserConnectionCreateWithoutUserInput = {
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
  }

  export type UserConnectionUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
  }

  export type UserConnectionCreateOrConnectWithoutUserInput = {
    where: UserConnectionWhereUniqueInput
    create: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput>
  }

  export type UserConnectionCreateManyUserInputEnvelope = {
    data: UserConnectionCreateManyUserInput | UserConnectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
  }

  export type MessageUpdateManyWithWhereWithoutAuthorInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutAuthorInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    senderId?: IntFilter<"Message"> | number
    senderLogin?: StringFilter<"Message"> | string
    channelId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
  }

  export type ChannelConnectionUpsertWithWhereUniqueWithoutUserInput = {
    where: ChannelConnectionWhereUniqueInput
    update: XOR<ChannelConnectionUpdateWithoutUserInput, ChannelConnectionUncheckedUpdateWithoutUserInput>
    create: XOR<ChannelConnectionCreateWithoutUserInput, ChannelConnectionUncheckedCreateWithoutUserInput>
  }

  export type ChannelConnectionUpdateWithWhereUniqueWithoutUserInput = {
    where: ChannelConnectionWhereUniqueInput
    data: XOR<ChannelConnectionUpdateWithoutUserInput, ChannelConnectionUncheckedUpdateWithoutUserInput>
  }

  export type ChannelConnectionUpdateManyWithWhereWithoutUserInput = {
    where: ChannelConnectionScalarWhereInput
    data: XOR<ChannelConnectionUpdateManyMutationInput, ChannelConnectionUncheckedUpdateManyWithoutUserInput>
  }

  export type ChannelConnectionScalarWhereInput = {
    AND?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
    OR?: ChannelConnectionScalarWhereInput[]
    NOT?: ChannelConnectionScalarWhereInput | ChannelConnectionScalarWhereInput[]
    id?: IntFilter<"ChannelConnection"> | number
    createdAt?: DateTimeFilter<"ChannelConnection"> | Date | string
    role?: EnumChannelRoleFilter<"ChannelConnection"> | $Enums.ChannelRole
    userId?: IntFilter<"ChannelConnection"> | number
    channelId?: IntFilter<"ChannelConnection"> | number
    muted?: IntFilter<"ChannelConnection"> | number
  }

  export type UserConnectionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserConnectionWhereUniqueInput
    update: XOR<UserConnectionUpdateWithoutUserInput, UserConnectionUncheckedUpdateWithoutUserInput>
    create: XOR<UserConnectionCreateWithoutUserInput, UserConnectionUncheckedCreateWithoutUserInput>
  }

  export type UserConnectionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserConnectionWhereUniqueInput
    data: XOR<UserConnectionUpdateWithoutUserInput, UserConnectionUncheckedUpdateWithoutUserInput>
  }

  export type UserConnectionUpdateManyWithWhereWithoutUserInput = {
    where: UserConnectionScalarWhereInput
    data: XOR<UserConnectionUpdateManyMutationInput, UserConnectionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserConnectionScalarWhereInput = {
    AND?: UserConnectionScalarWhereInput | UserConnectionScalarWhereInput[]
    OR?: UserConnectionScalarWhereInput[]
    NOT?: UserConnectionScalarWhereInput | UserConnectionScalarWhereInput[]
    id?: IntFilter<"UserConnection"> | number
    createdAt?: DateTimeFilter<"UserConnection"> | Date | string
    targetId?: IntFilter<"UserConnection"> | number
    followed?: IntFilter<"UserConnection"> | number
    blocked?: IntFilter<"UserConnection"> | number
    fromId?: IntFilter<"UserConnection"> | number
  }

  export type UserCreateWithoutUserConnectionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageCreateNestedManyWithoutAuthorInput
    channelConnections?: ChannelConnectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserConnectionsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    channelConnections?: ChannelConnectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserConnectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserConnectionsInput, UserUncheckedCreateWithoutUserConnectionsInput>
  }

  export type UserUpsertWithoutUserConnectionsInput = {
    update: XOR<UserUpdateWithoutUserConnectionsInput, UserUncheckedUpdateWithoutUserConnectionsInput>
    create: XOR<UserCreateWithoutUserConnectionsInput, UserUncheckedCreateWithoutUserConnectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserConnectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserConnectionsInput, UserUncheckedUpdateWithoutUserConnectionsInput>
  }

  export type UserUpdateWithoutUserConnectionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    channelConnections?: ChannelConnectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserConnectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    channelConnections?: ChannelConnectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutChannelConnectionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageCreateNestedManyWithoutAuthorInput
    userConnections?: UserConnectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChannelConnectionsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    userConnections?: UserConnectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChannelConnectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelConnectionsInput, UserUncheckedCreateWithoutChannelConnectionsInput>
  }

  export type ChannelCreateWithoutChannelConnectionsInput = {
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    messages?: MessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutChannelConnectionsInput = {
    id?: number
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    messages?: MessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutChannelConnectionsInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutChannelConnectionsInput, ChannelUncheckedCreateWithoutChannelConnectionsInput>
  }

  export type UserUpsertWithoutChannelConnectionsInput = {
    update: XOR<UserUpdateWithoutChannelConnectionsInput, UserUncheckedUpdateWithoutChannelConnectionsInput>
    create: XOR<UserCreateWithoutChannelConnectionsInput, UserUncheckedCreateWithoutChannelConnectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelConnectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelConnectionsInput, UserUncheckedUpdateWithoutChannelConnectionsInput>
  }

  export type UserUpdateWithoutChannelConnectionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutAuthorNestedInput
    userConnections?: UserConnectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelConnectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    userConnections?: UserConnectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelUpsertWithoutChannelConnectionsInput = {
    update: XOR<ChannelUpdateWithoutChannelConnectionsInput, ChannelUncheckedUpdateWithoutChannelConnectionsInput>
    create: XOR<ChannelCreateWithoutChannelConnectionsInput, ChannelUncheckedCreateWithoutChannelConnectionsInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutChannelConnectionsInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutChannelConnectionsInput, ChannelUncheckedUpdateWithoutChannelConnectionsInput>
  }

  export type ChannelUpdateWithoutChannelConnectionsInput = {
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    messages?: MessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutChannelConnectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    messages?: MessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserCreateWithoutMessagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    channelConnections?: ChannelConnectionCreateNestedManyWithoutUserInput
    userConnections?: UserConnectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hash: string
    login: string
    socket?: string | null
    channelConnections?: ChannelConnectionUncheckedCreateNestedManyWithoutUserInput
    userConnections?: UserConnectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChannelCreateWithoutMessagesInput = {
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    channelConnections?: ChannelConnectionCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMessagesInput = {
    id?: number
    banned?: ChannelCreatebannedInput | number[]
    invited?: ChannelCreateinvitedInput | number[]
    createdAt?: Date | string
    name: string
    password: string
    type: $Enums.ChannelType
    channelConnections?: ChannelConnectionUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMessagesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    channelConnections?: ChannelConnectionUpdateManyWithoutUserNestedInput
    userConnections?: UserConnectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    channelConnections?: ChannelConnectionUncheckedUpdateManyWithoutUserNestedInput
    userConnections?: UserConnectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelUpsertWithoutMessagesInput = {
    update: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateWithoutMessagesInput = {
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    channelConnections?: ChannelConnectionUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    banned?: ChannelUpdatebannedInput | number[]
    invited?: ChannelUpdateinvitedInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    channelConnections?: ChannelConnectionUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type MessageCreateWithoutChannelInput = {
    senderLogin: string
    content: string
    author: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChannelInput = {
    id?: number
    senderId: number
    senderLogin: string
    content: string
  }

  export type MessageCreateOrConnectWithoutChannelInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageCreateManyChannelInputEnvelope = {
    data: MessageCreateManyChannelInput | MessageCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type ChannelConnectionCreateWithoutChannelInput = {
    createdAt?: Date | string
    role: $Enums.ChannelRole
    muted: number
    user: UserCreateNestedOneWithoutChannelConnectionsInput
  }

  export type ChannelConnectionUncheckedCreateWithoutChannelInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    userId: number
    muted: number
  }

  export type ChannelConnectionCreateOrConnectWithoutChannelInput = {
    where: ChannelConnectionWhereUniqueInput
    create: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput>
  }

  export type ChannelConnectionCreateManyChannelInputEnvelope = {
    data: ChannelConnectionCreateManyChannelInput | ChannelConnectionCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
    create: XOR<MessageCreateWithoutChannelInput, MessageUncheckedCreateWithoutChannelInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChannelInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChannelInput, MessageUncheckedUpdateWithoutChannelInput>
  }

  export type MessageUpdateManyWithWhereWithoutChannelInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChannelInput>
  }

  export type ChannelConnectionUpsertWithWhereUniqueWithoutChannelInput = {
    where: ChannelConnectionWhereUniqueInput
    update: XOR<ChannelConnectionUpdateWithoutChannelInput, ChannelConnectionUncheckedUpdateWithoutChannelInput>
    create: XOR<ChannelConnectionCreateWithoutChannelInput, ChannelConnectionUncheckedCreateWithoutChannelInput>
  }

  export type ChannelConnectionUpdateWithWhereUniqueWithoutChannelInput = {
    where: ChannelConnectionWhereUniqueInput
    data: XOR<ChannelConnectionUpdateWithoutChannelInput, ChannelConnectionUncheckedUpdateWithoutChannelInput>
  }

  export type ChannelConnectionUpdateManyWithWhereWithoutChannelInput = {
    where: ChannelConnectionScalarWhereInput
    data: XOR<ChannelConnectionUpdateManyMutationInput, ChannelConnectionUncheckedUpdateManyWithoutChannelInput>
  }

  export type MessageCreateManyAuthorInput = {
    id?: number
    senderLogin: string
    channelId: number
    content: string
  }

  export type ChannelConnectionCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    channelId: number
    muted: number
  }

  export type UserConnectionCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    targetId: number
    followed: number
    blocked: number
  }

  export type MessageUpdateWithoutAuthorInput = {
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    channelId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelConnectionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    muted?: IntFieldUpdateOperationsInput | number
    channel?: ChannelUpdateOneRequiredWithoutChannelConnectionsNestedInput
  }

  export type ChannelConnectionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    channelId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelConnectionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    channelId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type UserConnectionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
  }

  export type UserConnectionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
  }

  export type UserConnectionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetId?: IntFieldUpdateOperationsInput | number
    followed?: IntFieldUpdateOperationsInput | number
    blocked?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyChannelInput = {
    id?: number
    senderId: number
    senderLogin: string
    content: string
  }

  export type ChannelConnectionCreateManyChannelInput = {
    id?: number
    createdAt?: Date | string
    role: $Enums.ChannelRole
    userId: number
    muted: number
  }

  export type MessageUpdateWithoutChannelInput = {
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    senderLogin?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelConnectionUpdateWithoutChannelInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    muted?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutChannelConnectionsNestedInput
  }

  export type ChannelConnectionUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    userId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelConnectionUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumChannelRoleFieldUpdateOperationsInput | $Enums.ChannelRole
    userId?: IntFieldUpdateOperationsInput | number
    muted?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelCountOutputTypeDefaultArgs instead
     */
    export type ChannelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserConnectionDefaultArgs instead
     */
    export type UserConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelConnectionDefaultArgs instead
     */
    export type ChannelConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelDefaultArgs instead
     */
    export type ChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}